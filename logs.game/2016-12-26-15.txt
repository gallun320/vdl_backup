26.12 15:49:50 ->>-: core/server.login { host => 172.16.30.23, name => vdl.0, port => 2030, type => game, _type => core/server.login, externalHost => 172.16.30.23, externalPort => 2030 }
26.12 15:49:50 -<<-: server.login ok
26.12 15:49:50 DB: SELECT * FROM LocalizationStrings
26.12 15:49:50 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
26.12 15:49:50 -<<-: core/server.query ok
26.12 15:49:51 TIMER: Starting timer...
26.12 15:49:51 TIMER: Timer running...
26.12 15:49:51 DB: SELECT * FROM GameVars
26.12 15:49:51 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
26.12 15:49:51 -<<-: core/server.query ok
26.12 15:49:51 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
26.12 15:49:51 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
26.12 15:49:51 -<<-: core/server.query ok
26.12 15:49:51 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
26.12 15:49:51 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
26.12 15:49:51 -<<-: core/server.query ok
26.12 15:49:51 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
26.12 15:49:51 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
26.12 15:49:51 -<<-: core/server.query ok
26.12 15:49:51 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
26.12 15:49:51 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
26.12 15:49:51 -<<-: core/server.query ok
26.12 15:49:51 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
26.12 15:49:51 -<<-: core/quest.getDaily ok
26.12 15:49:51 DB: SELECT * FROM UserAttributeTypes
26.12 15:49:51 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
26.12 15:49:51 -<<-: core/server.query ok
26.12 15:49:51 DB: SELECT * FROM UserVariableTypes
26.12 15:49:51 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
26.12 15:49:51 -<<-: core/server.query ok
26.12 15:49:51 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
26.12 15:49:51 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
26.12 15:49:51 -<<-: core/server.query ok
26.12 15:49:51 DB: SELECT * FROM ItemGroups
26.12 15:49:51 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
26.12 15:49:51 -<<-: core/server.query ok
26.12 15:49:51 DB: SELECT * FROM Bundles ORDER BY ID
26.12 15:49:51 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
26.12 15:49:51 -<<-: core/server.query ok
26.12 15:49:51 DB: SELECT * FROM BundleItems ORDER BY ID
26.12 15:49:51 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
26.12 15:49:51 -<<-: core/server.query ok
26.12 15:49:51 SHOP: loading items...
26.12 15:49:51 ->>-: core/shop.getList { _type => core/shop.getList }
26.12 15:49:51 -<<-: core/shop.getList ok
26.12 15:49:51 SHOP: 0 items loaded (0 sec)
26.12 15:49:51 DB: SELECT * FROM EffectAttributeTypes
26.12 15:49:51 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
26.12 15:49:51 -<<-: core/server.query ok
26.12 15:49:51 DB: SELECT * FROM Effects
26.12 15:49:51 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
26.12 15:49:51 -<<-: core/server.query ok
26.12 15:49:51 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
26.12 15:49:51 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
26.12 15:49:51 -<<-: core/server.query ok
26.12 15:49:51 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
26.12 126.12 15:52:10 ->>-: core/server.login { host => 172.16.30.23, name => vdl.0, port => 2030, type => game, _type => core/server.login, externalHost => 172.16.30.23, externalPort => 2030 }
26.12 15:52:10 -<<-: server.login ok
26.12 15:52:10 DB: SELECT * FROM LocalizationStrings
26.12 15:52:10 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
26.12 15:52:10 -<<-: core/server.query ok
26.12 15:52:10 TIMER: Starting timer...
26.12 15:52:10 TIMER: Timer running...
26.12 15:52:10 DB: SELECT * FROM GameVars
26.12 15:52:10 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
26.12 15:52:10 -<<-: core/server.query ok
26.12 15:52:10 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
26.12 15:52:10 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
26.12 15:52:10 -<<-: core/server.query ok
26.12 15:52:10 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
26.12 15:52:10 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
26.12 15:52:10 -<<-: core/server.query ok
26.12 15:52:10 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
26.12 15:52:10 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
26.12 15:52:10 -<<-: core/server.query ok
26.12 15:52:10 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
26.12 15:52:10 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
26.12 15:52:10 -<<-: core/server.query ok
26.12 15:52:10 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
26.12 15:52:10 -<<-: core/quest.getDaily ok
26.12 15:52:10 DB: SELECT * FROM UserAttributeTypes
26.12 15:52:10 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
26.12 15:52:10 -<<-: core/server.query ok
26.12 15:52:10 DB: SELECT * FROM UserVariableTypes
26.12 15:52:10 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
26.12 15:52:10 -<<-: core/server.query ok
26.12 15:52:10 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
26.12 15:52:10 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
26.12 15:52:10 -<<-: core/server.query ok
26.12 15:52:10 DB: SELECT * FROM ItemGroups
26.12 15:52:10 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
26.12 15:52:10 -<<-: core/server.query ok
26.12 15:52:10 DB: SELECT * FROM Bundles ORDER BY ID
26.12 15:52:10 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
26.12 15:52:10 -<<-: core/server.query ok
26.12 15:52:10 DB: SELECT * FROM BundleItems ORDER BY ID
26.12 15:52:10 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
26.12 15:52:10 -<<-: core/server.query ok
26.12 15:52:10 SHOP: loading items...
26.12 15:52:10 ->>-: core/shop.getList { _type => core/shop.getList }
26.12 15:52:10 -<<-: core/shop.getList ok
26.12 15:52:10 SHOP: 0 items loaded (0 sec)
26.12 15:52:10 DB: SELECT * FROM EffectAttributeTypes
26.12 15:52:10 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
26.12 15:52:10 -<<-: core/server.query ok
26.12 15:52:10 DB: SELECT * FROM Effects
26.12 15:52:10 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
26.12 15:52:10 -<<-: core/server.query ok
26.12 15:52:10 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part(26.12 15:56:27 ->>-: core/server.login { host => 172.16.20.171, name => vdl.0, port => 2030, type => game, _type => core/server.login, externalHost => 172.16.20.171, externalPort => 2030 }
26.12 15:56:27 -<<-: server.login ok
26.12 15:56:27 DB: SELECT * FROM LocalizationStrings
26.12 15:56:27 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
26.12 15:56:27 -<<-: core/server.query ok
26.12 15:56:27 TIMER: Starting timer...
26.12 15:56:27 TIMER: Timer running...
26.12 15:56:27 DB: SELECT * FROM GameVars
26.12 15:56:27 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
26.12 15:56:27 -<<-: core/server.query ok
26.12 15:56:27 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
26.12 15:56:27 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
26.12 15:56:27 -<<-: core/server.query ok
26.12 15:56:27 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
26.12 15:56:27 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
26.12 15:56:27 -<<-: core/server.query ok
26.12 15:56:27 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
26.12 15:56:27 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
26.12 15:56:27 -<<-: core/server.query ok
26.12 15:56:27 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
26.12 15:56:27 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
26.12 15:56:27 -<<-: core/server.query ok
26.12 15:56:27 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
26.12 15:56:27 -<<-: core/quest.getDaily ok
26.12 15:56:27 DB: SELECT * FROM UserAttributeTypes
26.12 15:56:27 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
26.12 15:56:27 -<<-: core/server.query ok
26.12 15:56:27 DB: SELECT * FROM UserVariableTypes
26.12 15:56:27 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
26.12 15:56:27 -<<-: core/server.query ok
26.12 15:56:27 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
26.12 15:56:27 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
26.12 15:56:27 -<<-: core/server.query ok
26.12 15:56:27 DB: SELECT * FROM ItemGroups
26.12 15:56:27 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
26.12 15:56:27 -<<-: core/server.query ok
26.12 15:56:27 DB: SELECT * FROM Bundles ORDER BY ID
26.12 15:56:27 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
26.12 15:56:27 -<<-: core/server.query ok
26.12 15:56:27 DB: SELECT * FROM BundleItems ORDER BY ID
26.12 15:56:27 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
26.12 15:56:27 -<<-: core/server.query ok
26.12 15:56:27 SHOP: loading items...
26.12 15:56:27 ->>-: core/shop.getList { _type => core/shop.getList }
26.12 15:56:27 -<<-: core/shop.getList ok
26.12 15:56:27 SHOP: 0 items loaded (0 sec)
26.12 15:56:27 DB: SELECT * FROM EffectAttributeTypes
26.12 15:56:27 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
26.12 15:56:27 -<<-: core/server.query ok
26.12 15:56:27 DB: SELECT * FROM Effects
26.12 15:56:27 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
26.12 15:56:27 -<<-: core/server.query ok
26.12 15:56:27 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_par26.12 15:57:37 ->>-: core/server.login { host => 172.16.20.171, name => vdl.0, port => 2030, type => game, _type => core/server.login, externalHost => 172.16.20.171, externalPort => 2030 }
26.12 15:57:37 -<<-: server.login ok
26.12 15:57:37 DB: SELECT * FROM LocalizationStrings
26.12 15:57:37 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
26.12 15:57:37 -<<-: core/server.query ok
26.12 15:57:37 TIMER: Starting timer...
26.12 15:57:37 TIMER: Timer running...
26.12 15:57:37 DB: SELECT * FROM GameVars
26.12 15:57:37 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
26.12 15:57:37 -<<-: core/server.query ok
26.12 15:57:37 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
26.12 15:57:37 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
26.12 15:57:37 -<<-: core/server.query ok
26.12 15:57:37 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
26.12 15:57:37 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
26.12 15:57:37 -<<-: core/server.query ok
26.12 15:57:37 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
26.12 15:57:37 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
26.12 15:57:37 -<<-: core/server.query ok
26.12 15:57:37 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
26.12 15:57:37 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
26.12 15:57:37 -<<-: core/server.query ok
26.12 15:57:37 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
26.12 15:57:37 -<<-: core/quest.getDaily ok
26.12 15:57:37 DB: SELECT * FROM UserAttributeTypes
26.12 15:57:37 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
26.12 15:57:37 -<<-: core/server.query ok
26.12 15:57:37 DB: SELECT * FROM UserVariableTypes
26.12 15:57:37 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
26.12 15:57:37 -<<-: core/server.query ok
26.12 15:57:37 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
26.12 15:57:37 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
26.12 15:57:37 -<<-: core/server.query ok
26.12 15:57:37 DB: SELECT * FROM ItemGroups
26.12 15:57:37 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
26.12 15:57:37 -<<-: core/server.query ok
26.12 15:57:37 DB: SELECT * FROM Bundles ORDER BY ID
26.12 15:57:37 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
26.12 15:57:37 -<<-: core/server.query ok
26.12 15:57:37 DB: SELECT * FROM BundleItems ORDER BY ID
26.12 15:57:37 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
26.12 15:57:37 -<<-: core/server.query ok
26.12 15:57:37 SHOP: loading items...
26.12 15:57:37 ->>-: core/shop.getList { _type => core/shop.getList }
26.12 15:57:37 -<<-: core/shop.getList ok
26.12 15:57:37 SHOP: 0 items loaded (0 sec)
26.12 15:57:37 DB: SELECT * FROM EffectAttributeTypes
26.12 15:57:37 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
26.12 15:57:37 -<<-: core/server.query ok
26.12 15:57:37 DB: SELECT * FROM Effects
26.12 15:57:37 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
26.12 15:57:37 -<<-: core/server.query ok
26.12 15:57:37 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
26.12 15:57:37 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
26.12 15:57:37 -<<-: core/server.query ok
26.12 15:57:37 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
26.12 15:57:37 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
26.12 15:57:37 -<<-: core/server.query ok
26.12 15:57:37 DB: SELECT * FROM Badges
26.12 15:57:37 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
26.12 15:57:37 -<<-: core/server.query ok
26.12 15:57:58 NET: Client (conid:35251336) connected to vdl.0 (clients:1)
26.12 15:57:59 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTEy }
26.12 15:57:59 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid112' AND Password = E'uid112'
26.12 15:57:59 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid112' AND Password = E'uid112', _type => core/server.query }
26.12 15:57:59 -<<-: core/server.query ok
26.12 15:57:59 ->>-: core/user.isOnlineID { id => 112, _type => core/user.isOnlineID }
26.12 15:57:59 -<<-: core/user.isOnlineID ok
26.12 15:57:59 ->>-: core/cache.get { type => user, v => -1, id => 112, _type => core/cache.get }
26.12 15:57:59 -<<-: core/cache.get ok
26.12 15:57:59 ->>-: core/cache.get { type => questdata, v => -1, id => 112, _type => core/cache.get }
26.12 15:57:59 -<<-: core/cache.get ok
26.12 15:57:59 NET: Client login (conid:35251336, id:112, name:uid112)
26.12 15:57:59 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 112, _type => core/user.loginPost, ipAddr => 172.16.20.185 }
26.12 15:57:59 -<<-: core/user.loginPost null
26.12 15:57:59 DB: SELECT ID FROM TempUserLogins WHERE UserID = 112 AND Date = 'today'::timestamp
26.12 15:57:59 ->>-: core/server.query { q => SELECT ID FROM TempUserLogins WHERE UserID = 112 AND Date = 'today'::timestamp, _type => core/server.query }
26.12 15:57:59 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
26.12 15:57:59 PENDING: INSERT INTO TempUserLogins (UserID, Date) VALUES (112, 'today'::timestamp)
26.12 15:57:59 == NET: uid112 ret: user.login { name => uid112, type => user.login, errorCode => ok, id => 112 }
26.12 15:57:59 == NET: uid112 ret: user.join { name => uid112, type => user.join }
26.12 15:57:59 ->>-: core/server.ping { _type => core/server.ping, _notify => {{ q => INSERT INTO TempUserLogins (UserID, Date) VALUES (112, 'today'::timestamp), _type => core/server.pending }} }
26.12 15:57:59 -<<-: core/server.ping { errorCode => ok, _type => core/server.ping }
26.12 15:58:02 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
26.12 15:58:02 TIME: user.ping 0.22 ms
26.12 15:58:02 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
