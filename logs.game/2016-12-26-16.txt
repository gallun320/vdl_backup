26.12 16:10:16 ->>-: core/server.login { host => 172.16.20.171, name => vdl.0, port => 2030, type => game, _type => core/server.login, externalHost => 172.16.20.171, externalPort => 2030 }
26.12 16:10:16 -<<-: server.login ok
26.12 16:10:16 DB: SELECT * FROM LocalizationStrings
26.12 16:10:16 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
26.12 16:10:16 -<<-: core/server.query ok
26.12 16:10:16 TIMER: Starting timer...
26.12 16:10:16 TIMER: Timer running...
26.12 16:10:16 DB: SELECT * FROM GameVars
26.12 16:10:16 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
26.12 16:10:16 -<<-: core/server.query ok
26.12 16:10:16 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
26.12 16:10:16 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
26.12 16:10:16 -<<-: core/server.query ok
26.12 16:10:16 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
26.12 16:10:16 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
26.12 16:10:16 -<<-: core/server.query ok
26.12 16:10:16 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
26.12 16:10:16 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
26.12 16:10:16 -<<-: core/server.query ok
26.12 16:10:16 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
26.12 16:10:16 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
26.12 16:10:16 -<<-: core/server.query ok
26.12 16:10:16 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
26.12 16:10:16 -<<-: core/quest.getDaily ok
26.12 16:10:16 DB: SELECT * FROM UserAttributeTypes
26.12 16:10:16 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
26.12 16:10:16 -<<-: core/server.query ok
26.12 16:10:16 DB: SELECT * FROM UserVariableTypes
26.12 16:10:16 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
26.12 16:10:16 -<<-: core/server.query ok
26.12 16:10:16 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
26.12 16:10:16 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
26.12 16:10:16 -<<-: core/server.query ok
26.12 16:10:16 DB: SELECT * FROM ItemGroups
26.12 16:10:16 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
26.12 16:10:16 -<<-: core/server.query ok
26.12 16:10:16 DB: SELECT * FROM Bundles ORDER BY ID
26.12 16:10:16 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
26.12 16:10:16 -<<-: core/server.query ok
26.12 16:10:16 DB: SELECT * FROM BundleItems ORDER BY ID
26.12 16:10:16 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
26.12 16:10:16 -<<-: core/server.query ok
26.12 16:10:16 SHOP: loading items...
26.12 16:10:16 ->>-: core/shop.getList { _type => core/shop.getList }
26.12 16:10:16 -<<-: core/shop.getList ok
26.12 16:10:16 SHOP: 0 items loaded (0 sec)
26.12 16:10:16 DB: SELECT * FROM EffectAttributeTypes
26.12 16:10:16 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
26.12 16:10:16 -<<-: core/server.query ok
26.12 16:10:16 DB: SELECT * FROM Effects
26.12 16:10:16 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
26.12 16:10:16 -<<-: core/server.query ok
26.12 16:10:16 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
26.12 16:10:16 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
26.12 16:10:16 -<<-: core/server.query ok
26.12 16:10:16 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
26.12 16:10:16 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
26.12 16:10:16 -<<-: core/server.query ok
26.12 16:10:16 DB: SELECT * FROM Badges
26.12 16:10:16 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
26.12 16:10:16 -<<-: core/server.query ok
26.12 16:10:33 NET: Client (conid:82749226) connected to vdl.0 (clients:1)
26.12 16:10:34 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTEy }
26.12 16:10:34 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid112' AND Password = E'uid112'
26.12 16:10:34 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid112' AND Password = E'uid112', _type => core/server.query }
26.12 16:10:34 -<<-: core/server.query ok
26.12 16:10:34 ->>-: core/user.isOnlineID { id => 112, _type => core/user.isOnlineID }
26.12 16:10:34 -<<-: core/user.isOnlineID ok
26.12 16:10:34 ->>-: core/cache.get { type => user, v => -1, id => 112, _type => core/cache.get }
26.12 16:10:34 -<<-: core/cache.get ok
26.12 16:10:34 ->>-: core/cache.get { type => questdata, v => -1, id => 112, _type => core/cache.get }
26.12 16:10:34 -<<-: core/cache.get ok
26.12 16:10:34 NET: Client login (conid:82749226, id:112, name:uid112)
26.12 16:10:34 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 112, _type => core/user.loginPost, ipAddr => 172.16.20.185 }
26.12 16:10:34 -<<-: core/user.loginPost null
26.12 16:10:34 == NET: uid112 ret: user.login { name => uid112, type => user.login, errorCode => ok, id => 112 }
26.12 16:10:34 == NET: uid112 ret: user.join { name => uid112, type => user.join }
26.12 16:10:37 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
26.12 16:10:37 TIME: user.ping 0.24 ms
26.12 16:10:37 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:10:41 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 112, _type => core/cache.update }
26.12 16:10:41 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
26.12 16:11:03 ++ NET: uid112 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
26.12 16:11:03 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
26.12 16:11:03 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ price => 300, name => test, type => once, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid12, id => 12 },{ name => Aimer, id => 76 }], battleActive => null, rounddate => 2016-17-11 20:00, startdate => 2016-18-11 21:00 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
26.12 16:11:03 TIME: tournament.getAvailableTournament 8.51 ms
26.12 16:11:03 == NET: uid112 ret: tournament.getAvailableTournament { list => [{ price => 300, name => test, type => once, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid12, id => 12 },{ name => Aimer, id => 76 }], battleActive => null, rounddate => 2016-17-11 20:00, startdate => 2016-18-11 21:00 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
26.12 16:11:03 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
26.12 16:11:03 TIME: user.ping 0.24 ms
26.12 16:11:03 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:11:15 ++ NET: uid112 req: user.data { messageType => user.data }
26.12 16:11:15 ->>-: vdl/cache.user.getData { userId => 112, _type => vdl/cache.user.getData, money => 0 }
26.12 16:11:15 -<<-: vdl/cache.user.getData { info => { city => null, year => null, email => null }, errorCode => ok, _type => vdl/cache.user.getData, money => 0 }
26.12 16:11:15 TIME: user.data 0.27 ms
26.12 16:11:15 == NET: uid112 ret: user.data { info => { city => null, year => null, email => null }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 0 }
26.12 16:11:16 TIMER: Check auto-disconnect...
26.12 16:11:16 STATS: vdl.0 cache, locks:2
26.12 16:11:20 ++ NET: uid112 req: user.addMoney { count => 100, messageType => user.addMoney }
26.12 16:11:20 TIME: user.addMoney 0.46 ms
26.12 16:11:20 == NET: uid112 ret: user.addMoney { type => user.addMoney, errorCode => ok, money => 200 }
26.12 16:11:21 ++ NET: uid112 req: user.data { messageType => user.data }
26.12 16:11:21 ->>-: vdl/cache.user.getData { userId => 112, _type => vdl/cache.user.getData, money => 200 }
26.12 16:11:21 -<<-: vdl/cache.user.getData { info => { city => null, year => null, email => null }, errorCode => ok, _type => vdl/cache.user.getData, money => 200 }
26.12 16:11:21 STATS: vdl.0 cache connection, 29 calls, total 0.0398573875427246 sec spent, avg 1.37 ms
26.12 16:11:21 TIME: user.data 1.47 ms
26.12 16:11:21 == NET: uid112 ret: user.data { info => { city => null, year => null, email => null }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 200 }
26.12 16:11:25 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
26.12 16:11:25 TIME: user.ping 0.2 ms
26.12 16:11:25 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:11:26 ->>-: core/cache.update { diff => {params => { attrs => { money => 200 } }}, type => user, unlock => false, id => 112, _type => core/cache.update }
26.12 16:11:26 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
26.12 16:11:37 ++ NET: uid112 req: user.data { messageType => user.data }
26.12 16:11:37 ->>-: vdl/cache.user.getData { userId => 112, _type => vdl/cache.user.getData, money => 200 }
26.12 16:11:37 -<<-: vdl/cache.user.getData { info => { city => null, year => null, email => null }, errorCode => ok, _type => vdl/cache.user.getData, money => 200 }
26.12 16:11:37 TIME: user.data 0.96 ms
26.12 16:11:37 == NET: uid112 ret: user.data { info => { city => null, year => null, email => null }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 200 }
26.12 16:11:39 ++ NET: uid112 req: user.addMoney { count => 100, messageType => user.addMoney }
26.12 16:11:39 TIME: user.addMoney 0.38 ms
26.12 16:11:39 == NET: uid112 ret: user.addMoney { type => user.addMoney, errorCode => ok, money => 400 }
26.12 16:11:39 ++ NET: uid112 req: user.data { messageType => user.data }
26.12 16:11:39 ->>-: vdl/cache.user.getData { userId => 112, _type => vdl/cache.user.getData, money => 400 }
26.12 16:11:39 -<<-: vdl/cache.user.getData { info => { city => null, year => null, email => null }, errorCode => ok, _type => vdl/cache.user.getData, money => 400 }
26.12 16:11:39 TIME: user.data 0.56 ms
26.12 16:11:39 == NET: uid112 ret: user.data { info => { city => null, year => null, email => null }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 400 }
26.12 16:11:46 ->>-: core/cache.update { diff => {params => { attrs => { money => 400 } }}, type => user, unlock => false, id => 112, _type => core/cache.update }
26.12 16:11:46 -<<-: core/cache.update { errorCode => ok, version => 3, _type => core/cache.update }
26.12 16:11:47 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
26.12 16:11:47 TIME: user.ping 0.1 ms
26.12 16:11:47 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:12:13 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
26.12 16:12:13 TIME: user.ping 0.24 ms
26.12 16:12:13 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:12:16 TIMER: Check auto-disconnect...
26.12 16:12:16 STATS: vdl.0 cache, locks:2
26.12 16:12:35 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
26.12 16:12:35 TIME: user.ping 0.17 ms
26.12 16:12:35 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:12:58 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
26.12 16:12:58 TIME: user.ping 0.21 ms
26.12 16:12:58 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:13:16 TIMER: Check auto-disconnect...
26.12 16:13:16 STATS: vdl.0 cache, locks:2
26.12 16:13:20 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
26.12 16:13:20 TIME: user.ping 0.25 ms
26.12 16:13:20 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:13:43 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
26.12 16:13:43 TIME: user.ping 0.33 ms
26.12 16:13:43 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:14:07 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
26.12 16:14:07 TIME: user.ping 0.21 ms
26.12 16:14:07 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:14:09 NET: Client (name:uid112 conid:82749226 TCP) disconnected from vdl.0 (clients:0)
26.12 16:14:09 DB: SELECT id FROM battle WHERE firstid=112 OR secondid=112 AND finished <> true
26.12 16:14:09 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=112 OR secondid=112 AND finished <> true, _type => core/server.query }
26.12 16:14:09 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
26.12 16:14:09 STATS: vdl.0 cache connection, 34 calls, total 0.0446712970733643 sec spent, avg 1.31 ms
26.12 16:14:09 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
26.12 16:14:09 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
26.12 16:14:09 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
26.12 16:14:09 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 502
Called from modules/VDLBattleModule.hx line 515
Called from snipe/slave/Server.hx line 994
26.12 16:14:09 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 112, _type => core/cache.update }
26.12 16:14:09 -<<-: core/cache.update { errorCode => ok, version => 4, _type => core/cache.update }
26.12 16:14:09 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 112, _type => core/cache.update }
26.12 16:14:09 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
26.12 16:14:09 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 112, _type => core/user.logoutPost }
26.12 16:14:09 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
26.12 16:14:09 NET: Client (conid:19732091) connected to vdl.0 (clients:1)
26.12 16:14:09 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
26.12 16:14:09 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
26.12 16:14:09 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
26.12 16:14:09 -<<-: core/server.query { list => {{ name => Aimer, networkid => , isbanned => false, id => 76 }}, errorCode => ok, _type => core/server.query }
26.12 16:14:09 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
26.12 16:14:09 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
26.12 16:14:09 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
26.12 16:14:09 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => Aimer, deleted => false, email => , networktype =>   , password => kO2YJdf, isbanned => false, regdate => 2016-10-19 18:05:38.946809+03, language => en, networkid => , params => { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1479651809, lastLoginDate => 325, money => 3, lastLoadDate => 1121 }, effects => { list => [] } }}, version => 0, id => 76 } }
26.12 16:14:09 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
26.12 16:14:09 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 76 } }
26.12 16:14:09 NET: Client login (conid:19732091, id:76, name:Aimer)
26.12 16:14:09 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.20.185 }
26.12 16:14:09 -<<-: core/user.loginPost { _type => core/user.loginPost }
26.12 16:14:09 DB: SELECT ID FROM TempUserLogins WHERE UserID = 76 AND Date = 'today'::timestamp
26.12 16:14:09 ->>-: core/server.query { q => SELECT ID FROM TempUserLogins WHERE UserID = 76 AND Date = 'today'::timestamp, _type => core/server.query }
26.12 16:14:09 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
26.12 16:14:09 PENDING: INSERT INTO TempUserLogins (UserID, Date) VALUES (76, 'today'::timestamp)
26.12 16:14:09 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
26.12 16:14:09 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
26.12 16:14:09 ->>-: core/server.ping { _type => core/server.ping, _notify => {{ q => INSERT INTO TempUserLogins (UserID, Date) VALUES (76, 'today'::timestamp), _type => core/server.pending }} }
26.12 16:14:09 -<<-: core/server.ping { errorCode => ok, _type => core/server.ping }
26.12 16:14:09 ++ NET: Aimer req: user.data { messageType => user.data }
26.12 16:14:09 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData, money => 3 }
26.12 16:14:09 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData, money => 3 }
26.12 16:14:09 TIME: user.data 0.21 ms
26.12 16:14:09 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 3 }
26.12 16:14:16 TIMER: Check auto-disconnect...
26.12 16:14:16 STATS: vdl.0 cache, locks:2
26.12 16:14:16 ->>-: core/cache.update { diff => {language => en, params => { attrs => { _lastTime.24hr => 1482758049, lastLoginDate => 361, lastLoadDate => 1227 } }}, type => user, unlock => false, id => 76, _type => core/cache.update }
26.12 16:14:16 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
26.12 16:14:17 ++ NET: Aimer req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
26.12 16:14:17 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
26.12 16:14:17 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ price => 300, name => test, type => once, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid12, id => 12 },{ name => Aimer, id => 76 }], battleActive => null, rounddate => 2016-17-11 20:00, startdate => 2016-18-11 21:00 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
26.12 16:14:17 TIME: tournament.getAvailableTournament 5.6 ms
26.12 16:14:17 == NET: Aimer ret: tournament.getAvailableTournament { list => [{ price => 300, name => test, type => once, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid12, id => 12 },{ name => Aimer, id => 76 }], battleActive => null, rounddate => 2016-17-11 20:00, startdate => 2016-18-11 21:00 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
26.12 16:14:22 ++ NET: Aimer req: tournament.grid { tournamentId => 1, round => 1, messageType => tournament.grid }
26.12 16:14:22 ->>-: vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
26.12 16:14:22 -<<-: vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => starting }
26.12 16:14:22 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
26.12 16:14:22 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [12,76] }
26.12 16:14:22 ->>-: vdl/cache.tournament.setGrid { battles => [{ winner => -1, round => 1, player1 => 12, player2 => 76 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => starting }
26.12 16:14:22 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => -1, round => 1, player1 => 12, player2 => 76 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
26.12 16:14:22 TIME: tournament.grid 1.97 ms
26.12 16:14:22 == NET: Aimer ret: tournament.grid { list => [{ winner => -1, round => 1, player1 => 12, player2 => 76 }], type => tournament.grid, tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
26.12 16:14:30 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:14:30 TIME: user.ping 0.25 ms
26.12 16:14:30 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:14:52 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:14:52 TIME: user.ping 0.32 ms
26.12 16:14:52 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:15:14 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:15:14 TIME: user.ping 0.28 ms
26.12 16:15:14 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:15:16 TIMER: Check auto-disconnect...
26.12 16:15:16 STATS: vdl.0 cache, locks:2
26.12 16:15:20 ++ NET: Aimer req: tournament.deleteUsers { tournamentId => 1, messageType => tournament.deleteUsers }
26.12 16:15:20 ->>-: vdl/cache.tournament.deleteUsers { userId => 76, tournamentId => 1, _type => vdl/cache.tournament.deleteUsers }
26.12 16:15:20 -<<-: vdl/cache.tournament.deleteUsers { errorCode => ok, _type => vdl/cache.tournament.deleteUsers }
26.12 16:15:20 STATS: vdl.0 cache connection, 52 calls, total 0.065239429473877 sec spent, avg 1.25 ms
26.12 16:15:20 TIME: tournament.deleteUsers 1.09 ms
26.12 16:15:20 == NET: Aimer ret: tournament.deleteUsers { type => tournament.deleteUsers, errorCode => ok, _type => vdl/cache.tournament.deleteUsers }
26.12 16:15:20 ++ NET: Aimer req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
26.12 16:15:20 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
26.12 16:15:20 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ price => 300, name => test, type => once, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid12, id => 12 }], battleActive => null, rounddate => 2016-17-11 20:00, startdate => 2016-18-11 21:00 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
26.12 16:15:20 TIME: tournament.getAvailableTournament 1 ms
26.12 16:15:20 == NET: Aimer ret: tournament.getAvailableTournament { list => [{ price => 300, name => test, type => once, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid12, id => 12 }], battleActive => null, rounddate => 2016-17-11 20:00, startdate => 2016-18-11 21:00 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
26.12 16:15:23 ++ NET: Aimer req: user.data { messageType => user.data }
26.12 16:15:23 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData, money => 3 }
26.12 16:15:23 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData, money => 3 }
26.12 16:15:23 TIME: user.data 0.96 ms
26.12 16:15:23 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 3 }
26.12 16:15:25 ++ NET: Aimer req: user.addMoney { count => 100, messageType => user.addMoney }
26.12 16:15:25 TIME: user.addMoney 0.27 ms
26.12 16:15:25 == NET: Aimer ret: user.addMoney { type => user.addMoney, errorCode => ok, money => 203 }
26.12 16:15:26 ++ NET: Aimer req: user.data { messageType => user.data }
26.12 16:15:26 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData, money => 203 }
26.12 16:15:26 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData, money => 203 }
26.12 16:15:26 TIME: user.data 0.56 ms
26.12 16:15:26 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 203 }
26.12 16:15:31 ->>-: core/cache.update { diff => {params => { attrs => { money => 203 } }}, type => user, unlock => false, id => 76, _type => core/cache.update }
26.12 16:15:31 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
26.12 16:15:37 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:15:37 TIME: user.ping 0.17 ms
26.12 16:15:37 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:16:03 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:16:03 TIME: user.ping 0.26 ms
26.12 16:16:03 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:16:16 TIMER: Check auto-disconnect...
26.12 16:16:16 STATS: vdl.0 cache, locks:2
26.12 16:16:29 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:16:29 TIME: user.ping 0.18 ms
26.12 16:16:29 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:16:56 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:16:56 TIME: user.ping 0.14 ms
26.12 16:16:56 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:17:16 TIMER: Check auto-disconnect...
26.12 16:17:16 STATS: vdl.0 cache, locks:2
26.12 16:17:23 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:17:23 TIME: user.ping 0.07 ms
26.12 16:17:23 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:17:49 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:17:49 TIME: user.ping 0.17 ms
26.12 16:17:49 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:18:16 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:18:16 TIME: user.ping 0.22 ms
26.12 16:18:16 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:18:16 TIMER: Check auto-disconnect...
26.12 16:18:16 STATS: vdl.0 cache, locks:2
26.12 16:18:42 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:18:42 TIME: user.ping 0.2 ms
26.12 16:18:42 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:19:09 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:19:09 TIME: user.ping 0.2 ms
26.12 16:19:09 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:19:16 TIMER: Check auto-disconnect...
26.12 16:19:16 STATS: vdl.0 cache, locks:2
26.12 16:19:35 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:19:35 TIME: user.ping 0.24 ms
26.12 16:19:35 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:20:02 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:20:02 TIME: user.ping 0.16 ms
26.12 16:20:02 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:20:16 TIMER: Check auto-disconnect...
26.12 16:20:16 STATS: vdl.0 cache, locks:2
26.12 16:20:28 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:20:28 TIME: user.ping 0.13 ms
26.12 16:20:28 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:20:55 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:20:55 TIME: user.ping 0.26 ms
26.12 16:20:55 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:21:16 TIMER: Check auto-disconnect...
26.12 16:21:16 STATS: vdl.0 cache, locks:2
26.12 16:21:21 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:21:21 TIME: user.ping 0.19 ms
26.12 16:21:21 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:21:47 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:21:47 TIME: user.ping 0.23 ms
26.12 16:21:47 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:22:14 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:22:14 TIME: user.ping 0.21 ms
26.12 16:22:14 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:22:16 TIMER: Check auto-disconnect...
26.12 16:22:16 STATS: vdl.0 cache, locks:2
26.12 16:22:40 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:22:40 TIME: user.ping 0.24 ms
26.12 16:22:40 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:23:06 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:23:06 TIME: user.ping 0.24 ms
26.12 16:23:06 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:23:16 TIMER: Check auto-disconnect...
26.12 16:23:16 STATS: vdl.0 cache, locks:2
26.12 16:23:27 ++ NET: Aimer req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
26.12 16:23:27 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
26.12 16:23:27 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ price => 300, name => test, type => once, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid12, id => 12 }], battleActive => null, rounddate => 2016-17-11 20:00, startdate => 2016-18-11 21:00 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
26.12 16:23:27 STATS: vdl.0 cache connection, 57 calls, total 0.0713045597076416 sec spent, avg 1.25 ms
26.12 16:23:27 TIME: tournament.getAvailableTournament 2.92 ms
26.12 16:23:27 == NET: Aimer ret: tournament.getAvailableTournament { list => [{ price => 300, name => test, type => once, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid12, id => 12 }], battleActive => null, rounddate => 2016-17-11 20:00, startdate => 2016-18-11 21:00 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
26.12 16:23:32 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:23:32 TIME: user.ping 0.17 ms
26.12 16:23:32 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:23:55 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:23:55 TIME: user.ping 0.2 ms
26.12 16:23:55 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:24:16 TIMER: Check auto-disconnect...
26.12 16:24:16 STATS: vdl.0 cache, locks:2
26.12 16:24:19 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:24:19 TIME: user.ping 0.22 ms
26.12 16:24:19 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:24:45 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:24:45 TIME: user.ping 0.26 ms
26.12 16:24:45 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:25:10 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:25:10 TIME: user.ping 0.14 ms
26.12 16:25:10 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:25:16 TIMER: Check auto-disconnect...
26.12 16:25:16 STATS: vdl.0 cache, locks:2
26.12 16:25:35 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:25:35 TIME: user.ping 0.28 ms
26.12 16:25:35 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:26:00 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:26:00 TIME: user.ping 0.21 ms
26.12 16:26:00 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:26:16 TIMER: Check auto-disconnect...
26.12 16:26:16 STATS: vdl.0 cache, locks:2
26.12 16:26:25 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:26:25 TIME: user.ping 0.28 ms
26.12 16:26:25 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:26:50 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:26:50 TIME: user.ping 0.32 ms
26.12 16:26:50 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:27:15 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:27:15 TIME: user.ping 0.21 ms
26.12 16:27:15 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:27:16 TIMER: Check auto-disconnect...
26.12 16:27:16 STATS: vdl.0 cache, locks:2
26.12 16:27:41 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:27:41 TIME: user.ping 0.24 ms
26.12 16:27:41 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:28:06 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:28:06 TIME: user.ping 0.34 ms
26.12 16:28:06 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:28:16 TIMER: Check auto-disconnect...
26.12 16:28:16 STATS: vdl.0 cache, locks:2
26.12 16:28:34 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:28:34 TIME: user.ping 0.23 ms
26.12 16:28:34 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:29:01 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:29:01 TIME: user.ping 0.22 ms
26.12 16:29:01 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:29:16 TIMER: Check auto-disconnect...
26.12 16:29:16 STATS: vdl.0 cache, locks:2
26.12 16:29:30 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:29:30 TIME: user.ping 0.27 ms
26.12 16:29:30 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:30:01 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:30:01 TIME: user.ping 0.27 ms
26.12 16:30:01 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:30:16 TIMER: Check auto-disconnect...
26.12 16:30:16 STATS: vdl.0 cache, locks:2
26.12 16:30:34 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:30:34 TIME: user.ping 0.18 ms
26.12 16:30:34 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:31:07 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:31:07 TIME: user.ping 0.19 ms
26.12 16:31:07 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:31:16 TIMER: Check auto-disconnect...
26.12 16:31:16 STATS: vdl.0 cache, locks:2
26.12 16:31:39 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:31:39 TIME: user.ping 0.27 ms
26.12 16:31:39 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:32:10 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:32:10 TIME: user.ping 0.2 ms
26.12 16:32:10 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:32:16 TIMER: Check auto-disconnect...
26.12 16:32:16 STATS: vdl.0 cache, locks:2
26.12 16:32:38 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:32:38 TIME: user.ping 0.18 ms
26.12 16:32:38 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:33:10 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:33:10 TIME: user.ping 0.17 ms
26.12 16:33:10 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:33:16 TIMER: Check auto-disconnect...
26.12 16:33:16 STATS: vdl.0 cache, locks:2
26.12 16:33:44 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:33:44 TIME: user.ping 0.2 ms
26.12 16:33:44 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:34:16 TIMER: Check auto-disconnect...
26.12 16:34:16 STATS: vdl.0 cache, locks:2
26.12 16:34:19 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:34:19 TIME: user.ping 0.19 ms
26.12 16:34:19 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:34:55 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:34:55 TIME: user.ping 0.24 ms
26.12 16:34:55 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:35:16 TIMER: Check auto-disconnect...
26.12 16:35:16 STATS: vdl.0 cache, locks:2
26.12 16:35:31 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:35:31 TIME: user.ping 0.21 ms
26.12 16:35:31 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:36:07 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:36:07 TIME: user.ping 0.21 ms
26.12 16:36:07 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:36:16 TIMER: Check auto-disconnect...
26.12 16:36:16 STATS: vdl.0 cache, locks:2
26.12 16:36:42 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:36:42 TIME: user.ping 0.22 ms
26.12 16:36:42 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:37:16 TIMER: Check auto-disconnect...
26.12 16:37:16 STATS: vdl.0 cache, locks:2
26.12 16:37:17 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:37:17 TIME: user.ping 0.21 ms
26.12 16:37:17 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:37:53 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:37:53 TIME: user.ping 0.2 ms
26.12 16:37:53 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:38:16 TIMER: Check auto-disconnect...
26.12 16:38:16 STATS: vdl.0 cache, locks:2
26.12 16:38:29 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:38:29 TIME: user.ping 0.3 ms
26.12 16:38:29 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:39:05 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:39:05 TIME: user.ping 0.27 ms
26.12 16:39:05 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:39:16 TIMER: Check auto-disconnect...
26.12 16:39:16 STATS: vdl.0 cache, locks:2
26.12 16:39:40 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:39:40 TIME: user.ping 1.39 ms
26.12 16:39:40 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:40:16 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:40:16 TIME: user.ping 0.32 ms
26.12 16:40:16 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:40:16 TIMER: Check auto-disconnect...
26.12 16:40:16 STATS: vdl.0 cache, locks:2
26.12 16:40:51 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:40:51 TIME: user.ping 0.27 ms
26.12 16:40:51 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:41:16 TIMER: Check auto-disconnect...
26.12 16:41:16 STATS: vdl.0 cache, locks:2
26.12 16:41:26 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:41:26 TIME: user.ping 0.21 ms
26.12 16:41:26 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:42:00 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:42:00 TIME: user.ping 0.32 ms
26.12 16:42:00 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:42:16 TIMER: Check auto-disconnect...
26.12 16:42:16 STATS: vdl.0 cache, locks:2
26.12 16:42:25 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:42:25 TIME: user.ping 0.26 ms
26.12 16:42:25 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:42:57 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:42:57 TIME: user.ping 0.31 ms
26.12 16:42:57 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:43:16 TIMER: Check auto-disconnect...
26.12 16:43:16 STATS: vdl.0 cache, locks:2
26.12 16:43:33 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:43:33 TIME: user.ping 0.21 ms
26.12 16:43:33 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:44:08 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:44:08 TIME: user.ping 0.22 ms
26.12 16:44:08 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:44:16 TIMER: Check auto-disconnect...
26.12 16:44:16 STATS: vdl.0 cache, locks:2
26.12 16:44:41 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:44:41 TIME: user.ping 0.08 ms
26.12 16:44:41 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:45:11 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:45:11 TIME: user.ping 0.17 ms
26.12 16:45:11 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:45:16 TIMER: Check auto-disconnect...
26.12 16:45:16 STATS: vdl.0 cache, locks:2
26.12 16:45:43 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:45:43 TIME: user.ping 0.14 ms
26.12 16:45:43 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:46:13 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:46:13 TIME: user.ping 0.21 ms
26.12 16:46:13 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:46:16 TIMER: Check auto-disconnect...
26.12 16:46:16 STATS: vdl.0 cache, locks:2
26.12 16:46:40 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:46:40 TIME: user.ping 0.22 ms
26.12 16:46:40 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:47:04 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:47:04 TIME: user.ping 0.22 ms
26.12 16:47:04 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:47:16 TIMER: Check auto-disconnect...
26.12 16:47:17 STATS: vdl.0 cache, locks:2
26.12 16:47:25 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:47:25 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:47:25 TIME: user.ping 0.33 ms
26.12 16:47:52 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:47:52 TIME: user.ping 0.25 ms
26.12 16:47:52 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:48:16 TIMER: Check auto-disconnect...
26.12 16:48:17 STATS: vdl.0 cache, locks:2
26.12 16:48:24 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:48:24 TIME: user.ping 0.2 ms
26.12 16:48:24 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:48:57 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:48:57 TIME: user.ping 0.16 ms
26.12 16:48:57 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:49:16 TIMER: Check auto-disconnect...
26.12 16:49:17 STATS: vdl.0 cache, locks:2
26.12 16:49:28 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:49:28 TIME: user.ping 0.34 ms
26.12 16:49:28 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:50:01 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:50:01 TIME: user.ping 0.19 ms
26.12 16:50:01 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:50:16 TIMER: Check auto-disconnect...
26.12 16:50:17 STATS: vdl.0 cache, locks:2
26.12 16:50:32 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:50:32 TIME: user.ping 0.2 ms
26.12 16:50:32 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:50:58 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:50:58 TIME: user.ping 0.17 ms
26.12 16:50:58 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:51:16 TIMER: Check auto-disconnect...
26.12 16:51:17 STATS: vdl.0 cache, locks:2
26.12 16:51:20 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:51:20 TIME: user.ping 0.2 ms
26.12 16:51:20 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:51:41 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:51:41 TIME: user.ping 0.16 ms
26.12 16:51:41 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:52:03 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:52:03 TIME: user.ping 0.21 ms
26.12 16:52:03 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:52:16 TIMER: Check auto-disconnect...
26.12 16:52:17 STATS: vdl.0 cache, locks:2
26.12 16:52:28 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:52:28 TIME: user.ping 0.2 ms
26.12 16:52:28 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:52:51 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:52:51 TIME: user.ping 0.23 ms
26.12 16:52:51 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:53:12 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
26.12 16:53:12 TIME: user.ping 0.2 ms
26.12 16:53:12 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
26.12 16:53:16 TIMER: Check auto-disconnect...
26.12 16:53:17 STATS: vdl.0 cache, locks:2
26.12 16:54:16 TIMER: Check auto-disconnect...
26.12 16:54:17 STATS: vdl.0 cache, locks:2
26.12 16:55:16 TIMER: Check auto-disconnect...
26.12 16:55:17 STATS: vdl.0 cache, locks:2
26.12 16:56:16 TIMER: Check auto-disconnect...
26.12 16:56:16 NET: Client (name:Aimer conid:19732091 TCP) disconnected from vdl.0 (clients:0)
26.12 16:56:16 DB: SELECT id FROM battle WHERE firstid=76 OR secondid=76 AND finished <> true
26.12 16:56:16 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=76 OR secondid=76 AND finished <> true, _type => core/server.query }
26.12 16:56:16 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
26.12 16:56:16 STATS: vdl.0 cache connection, 58 calls, total 0.0729866027832031 sec spent, avg 1.26 ms
26.12 16:56:16 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
26.12 16:56:16 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
26.12 16:56:16 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
26.12 16:56:16 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 502
Called from modules/VDLBattleModule.hx line 515
Called from snipe/slave/Server.hx line 994
26.12 16:56:16 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 76, _type => core/cache.update }
26.12 16:56:16 -<<-: core/cache.update { errorCode => ok, version => 3, _type => core/cache.update }
26.12 16:56:16 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 76, _type => core/cache.update }
26.12 16:56:16 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
26.12 16:56:16 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 76, _type => core/user.logoutPost }
26.12 16:56:16 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
26.12 16:56:17 STATS: vdl.0 cache, locks:0
26.12 16:57:16 TIMER: Check auto-disconnect...
26.12 16:57:17 STATS: vdl.0 cache, locks:0
26.12 16:58:16 TIMER: Check auto-disconnect...
26.12 16:58:17 STATS: vdl.0 cache, locks:0
26.12 16:59:16 TIMER: Check auto-disconnect...
26.12 16:59:17 STATS: vdl.0 cache, locks:0
